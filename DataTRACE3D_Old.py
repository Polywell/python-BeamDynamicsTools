from numpy import *
import matplotlib.pyplot as plt
from numpy.linalg import inv

execfile('ellipse.py')

Angle = array([
[2.199114857512874111e-01, 7.795941612999441883e-01],
[4.291362538136914151e-01, 9.258523684736672532e-01],
[8.002760978739736908e-01, 1.095043435678288546e+00],
[8.246529164032679882e-01, 1.427272578637977407e+00]])
AngleV = Angle[:,0]; AngleH = Angle[:,1]


Sigma0 = matrix([
[0.5771000, 0.3980000, 0.000000, 0.000000, 0.000000, 0.000000],
[0.3980000, 171.8262, 0.000000, 0.000000, 0.000000, 0.000000],
[0.000000, 0.000000, 0.3439000, -.2715000, 0.000000, 0.000000],
[0.000000, 0.000000, -.2715000, 238.3722, 0.000000, 0.000000],
[0.000000, 0.000000, 0.000000, 0.000000, 1.297156, 2.343722],
[0.000000, 0.000000, 0.000000, 0.000000, 2.343722, 134.9344]])

# Final Modified Sigma Matrices
S0000 = matrix([
[5.9546 , 0.0000 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[3.7470 , 0.8950 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[4.9859 , 0.0000 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[5.4023 , 0.0000 , 0.0000 , 0.9420 , 0.0000 , 0.0000],
[24.8496, 0.0000 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[1.2935 , 0.0000 , 0.0000 , 0.0000 , 0.0000 , 0.9990]],float)

S0620 = matrix([
[5.8111 , 0.0000 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[3.7722 , 0.8910 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[5.0034 , 0.0000 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[5.3575 , 0.0000 , 0.0000 , 0.9330 , 0.0000 , 0.0000],
[24.0000 , 0.0000 , 0.0000 , 0.0700 , 0.1870 , 0.0000],
[1.2936 , 0.0000 , 0.0000 , 0.0820 , 0.1960 , 0.9990]],float)

S1110 = matrix([
[5.7476 , 0.0000 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[3.8482 , 0.8930 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[5.0907 , 0.0000 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[5.3928 , 0.0000 , 0.0000 , 0.9180 , 0.0000 , 0.0000],
[24.9540 , 0.0000 , 0.0000 , 0.1300 , 0.3330 , 0.0000],
[1.2937 , 0.0000 , 0.0000 , 0.1480 , 0.3480 , 0.9990]],float)

S1600 = matrix([
[5.7018 , 0.0000 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[3.9816 , 0.8990 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[5.2000 , 0.0000 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[5.4841 , 0.0000 , 0.0000 , 0.8940 , 0.0000 , 0.0000],
[25.1032, 0.0000 , 0.0000 , 0.1880 , 0.4730 , 0.0000],
[1.2938 , 0.0000 , 0.0000 , 0.2150 , 0.4930 , 0.9990]],float)

S1780 = matrix([
[5.6889 , 0.0000 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[4.0462 , 0.9020 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[5.4420 , 0.0000 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[5.5305 , 0.0000 , 0.0000 , 0.8830 , 0.0000 , 0.0000],
[25.1592 , 0.0000 , 0.0000 , 0.2100 , 0.5210 , 0.0000],
[1.2939 , 0.0000 , 0.0000 , 0.2400 , 0.5440 , 0.9990]],float)

S2400 = matrix([
[5.6561 , 0.0000 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[4.3298 , 0.9140 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[5.4044 , 0.0000 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[5.7380 , 0.0000 , 0.0000 , 0.8380 , 0.0000 , 0.0000],
[25.3334 , 0.0000 , 0.0000 , 0.2840 , 0.6720 , 0.0000],
[1.2941 , 0.0000 , 0.0000 , 0.3250 , 0.6970 , 0.9980]],float)

S3000 = matrix([
[5.5489 , 0.0000 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[4.5291 , 0.9180 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[5.4668 , 0.0000 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[6.0278 , 0.0000 , 0.0000 , 0.7980 , 0.0000 , 0.0000],
[25.2147 , 0.0000 , 0.0000 , 0.3450 , 0.7690 , 0.0000],
[1.2941 , 0.0000 , 0.0000 , 0.3940 , 0.7950 , 0.9980]],float)

S3120 = matrix([
[5.5371 , 0.0000 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[4.4848 , 0.9200 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[5.4908 , 0.0000 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[6.0884 , 0.0000 , 0.0000 , 0.7890 , 0.0000 , 0.0000],
[25.2144, 0.0000 , 0.0000 , 0.3570 , 0.7870 , 0.0000],
[1.2941 , 0.0000 , 0.0000 , 0.4090 , 0.8130 , 0.9980]],float)

S3470 = matrix([
[5.5366 , 0.0000 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[4.8126 , 0.9280 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[5.5964 , 0.0000 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[6.2650 , 0.0000 , 0.0000 , 0.7600 , 0.0000 , 0.0000],
[25.2886 , 0.0000 , 0.0000 , 0.3970 , 0.8390 , 0.0000],
[1.2943 , 0.0000 , 0.0000 , 0.4540 , 0.8640 , 0.9970]],float)

S4000 = matrix([
[5.6312 , 0.0000 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[5.3812 , 0.9450 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[5.8405 , 0.0000 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[6.5272 , 0.0000 , 0.0000 , 0.7000 , 0.0000 , 0.0000],
[25.5597 , 0.0000 , 0.0000 , 0.4640 , 0.9110 , 0.0000],
[1.2946 , 0.0000 , 0.0000 , 0.5310 , 0.9280 , 0.9960]],float)

S4450 = matrix([
[6.0062 , 0.0000 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[6.5468 , 0.9670 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[6.2312 , 0.0000 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[6.7172 , 0.0000 , 0.0000 , 0.5980 , 0.0000 , 0.0000],
[26.1901, 0.0000 , 0.0000 , 0.5460 , 0.9620 , 0.0000],
[1.2951 , 0.0000 , 0.0000 , 0.6220 , 0.9610 , 0.9950]],float)

S4800 = matrix([
[5.6312 , 0.0000 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[5.3812 , 0.9450 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[5.8405 , 0.0000 , 0.0000 , 0.0000 , 0.0000 , 0.0000],
[6.5272 , 0.0000 , 0.0000 , 0.7000 , 0.0000 , 0.0000],
[25.5597 , 0.0000 , 0.0000 , 0.4640 , 0.9110 , 0.0000],
[1.2946 , 0.0000 , 0.0000 , 0.5310 , 0.9280 , 0.9960]],float)

SReduced = [S0000,S0620,S1110,S1600,S1780,S2400,S3000,S3120,S3470,S4000,S4450,S4800]

Rx = [S0000[0,0],S0620[0,0],S1110[0,0],S1600[0,0],S1780[0,0],S2400[0,0],S3000[0,0],S3120[0,0],S3470[0,0],S4450[0,0],S4800[0,0]]
Ry = [S0000[2,0],S0620[2,0],S1110[2,0],S1600[2,0],S1780[2,0],S2400[2,0],S3000[2,0],S3120[2,0],S3470[2,0],S4450[2,0],S4800[2,0]]
Rpx=[]; Rpy=[]
#for i in [0,1,2,3,4,5,6,7,8,9,10]:
#	Rpx.append(Rx[i]/cos(AngleH[i]))
#	Rpy.append(Ry[i]/cos(AngleV[i]))


Path0 = 'SigmaFinal/' #'/home/hbar/Dropbox/Research/Simulation-Dynamics in Alcator with Trace3D/'


Iint0 = array([0,620,1110,1600,1780,2400,3000,3120,3470,4000,4450,4800])
Ilist = array([0.0,620.0,1110.0,1600.0,1780.0,2400.0,3000.0,3120.0,3470.0,4000.0,4450.0,4800.0])

#TargetPath = Path0+'Data_20130916_12Locations/TargetBasis_I_'
#Bt=[] # Target Basis
#for i in range(len(Iint0)):
#	Bt.append( (matrix(loadtxt(TargetPath+str(Iint0[i])+'.txt')) ) );

#SigmaPath = Path0+'Data_20130916_12Locations/SigmaBasis_I_'
#BS=[] # Beam Basis
#for i in range(len(Iint0)):
#	BS.append( (matrix(loadtxt(SigmaPath+str(Iint0[i])+'.txt'))) )


def ConverM6toM3(M6):
	i3 = [0,1,2]; i6=[0,2,4]
	M3 = matrix(zeros((3,3),float))
	for i in i3:
		for j in i3:
			M3[i,j]=M6[i6[i],i6[j]]
	return M3

#BS3=[]; Bt3=[];
#for i in range(len(BS)):
#	BS3.append( ConverM6toM3(BS[i]) )
#	Bt3.append( ConverM6toM3(Bt[i]) )

def Convert(MS,S0=Sigma0):	
	S = zeros((6,6),float)
# Calculate Diagonal Elements
	for i in range(6):
		S[i,i] = MS[i,0]**2
	S[5,5] = S[5,5]*100.0 # correct Units

# Calculate Off Diagonal Elements in the lower left triangle
	for i in range(6):
		for j in range(6):
				if i!=j and i<5:
					S[i,j] = MS[i+1,j]*sqrt(S[i,i]*S[j,j])

# Copy lower right triangle to upper right to symmetrize
	for i in range(6):
		for j in range(6):
			S[j,i] = S[i,j]

	# calculate change
	dS = zeros((6,6),float)
	for i in range(6):
		for j in range(6):
			if S0[i,j]!=0:
				dS[i,j] = (S[i,j]-S0[i,j])/S0[i,j]
	return S,dS

Sigma = []; dS=[];
for i in range(len(SReduced)):
	SIG,DS = Convert(SReduced[i])
	Sigma.append(SIG)
	dS.append(DS)

# Final Beam Ellipses
Ef = [];
for i in range(len(Sigma)):
	Ef.append(ellipse(Sigma[i]))

for i in [0,3,7,10]:
	savetxt(Path0+'Trace3DSigma_I_'+str(Iint0[i])+'.txt',Sigma[i])













# Beam Projected on Target
#Et = []
#
#for i in range(len(BS)):
#	M = inv( matrix( (BS[i].T)*(Bt[i]) ) ); Et.append(ellipse(M.T*Sigma[i]*M));


#plt.figure()
#for i in range(len(Ef)):
#	Ef[i].PlotALL()
#d1=10.0; d2 = 15.0# 35.0

#Index = [0,1,2,3,4,5,6,7,8,9,10,11]
#COL = ['b','g','r','c','k','y','b','g','r','c','k','y']

#plt.figure()
#for i in Index:
#	Ef[i].PlotXY(Label=r'$I_{TF} = $%.f $A$' %Ilist[i],Mod=COL[i],Scale=sqrt(1.0/5.0))
#plt.xlim(-d1,d1); plt.ylim(-d1,d1)
#plt.title('Transverse Projection of RMS Envelope')
#plt.legend(loc=10)

#plt.figure()
#for i in Index:
#	Ef[i].PlotXY(Label=r'$I_{TF} = $%.f $A$' %Ilist[i],Mod=':'+COL[i],Scale=sqrt(1.0/5.0))
#for i in Index:
#	Ef[i].ProjectXY(BS3[i],Bt3[i],Label=r'$I_{TF} = $%.f $A$' %Ilist[i],Mod=COL[i])#,Scale=sqrt(1.0/5.0))
#for i in Index:
#	Ef[i].PrintProjection('BeamEllipseOutput/ProjectedEllipse'+str(Iint0[i]))

#plt.xlim(-d2,d2); plt.ylim(-d2,d2)
#plt.xlabel(r'Toroidal Direction X$\phi$ [mm]'); plt.ylabel(r' Poloidal Direction Y$p$ [mm]')
#plt.title('RMS Beam Envelope Projected on Target'); plt.legend()

#if False:
#	plt.figure()
#	for i in Index:
#		Ef[i].PlotXY(Label=r'$I_{TF} = $%.f $A$' %Ilist[i],Mod=':'+COL[i],Scale=sqrt(1.0/5.0))
#	#plt.xlim(-d1,d1); plt.ylim(-d1,d1)
#	plt.title('Transverse Projection of RMS Envelope')
#	for i in Index:
#		Et[i].PlotXY(Label=r'$I_{TF} = $%.f $A$' %Ilist[i],Mod=COL[i],Scale=sqrt(1.0/5.0))

#plt.show()

